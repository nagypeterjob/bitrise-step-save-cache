title: Save Cache
summary: Saves build cache using a cache key. This Step needs to be used in combination with **Restore Cache**.
description: |
  Saves build cache using a cache key. This Step needs to be used in combination with **Restore Cache**.

  #### About key-based caching

  Key-based caching is a concept where cache archives are saved and restored using a unique cache key. One Bitrise project can have multiple cache archives stored simultaneously, and the **Restore Cache Step** downloads a cache archive associated with the key provided as a Step input. The **Save Cache** Step is responsible for uploading the cache archive with an exact key.

  Caches can become outdated across builds when something changes in the project (for example, a dependency gets upgraded to a new version). In this case, a new (unique) cache key is needed to save the new cache contents. This is possible if the cache key is dynamic and changes based on the project state (for example, a checksum of the dependency lockfile is part of the cache key). If you use the same dynamic cache key when restoring the cache, the Step will download the most relevant cache archive available.

  Key-based caching is platform-agnostic and can be used to cache anything by carefully selecting the cache key and the files/folders to include in the cache.

  #### Templates

  The Step requires a string key to use when uploading a cache archive. In order to always download the most relevant cache archive for each build, the cache key input can contain template elements. The **Restore cache Step** evaluates the key template at runtime and the final key value can change based on the build environment or files in the repo. Similarly, the **Save cache** Step also uses templates to compute a unique cache key when uploading a cache archive.

  The following variables are supported in the **Cache key** input:

  - `cache-key-{{ .Branch }}`: Current git branch the build runs on
  - `cache-key-{{ .CommitHash }}`: SHA-256 hash of the git commit the build runs on
  - `cache-key-{{ .Workflow }}`: Current Bitrise workflow name (eg. `primary`)
  - `{{ .Arch }}-cache-key`: Current CPU architecture (`amd64` or `arm64`)
  - `{{ .OS }}-cache-key`: Current operating system (`linux` or `darwin`)

  Functions available in a template:

  `checksum`: This function takes one or more file paths and computes the SHA256 [checksum](https://en.wikipedia.org/wiki/Checksum) of the file contents. This is useful for creating unique cache keys based on files that describe content to cache.

  Examples of using `checksum`:
  - `cache-key-{{ checksum "package-lock.json" }}`
  - `cache-key-{{ checksum "**/Package.resolved" }}`
  - `cache-key-{{ checksum "**/*.gradle*" "gradle.properties" }}`

  `getenv`: This function returns the value of an environment variable or an empty string if the variable is not defined.

  Examples of `getenv`:
  - `cache-key-{{ getenv "PR" }}`
  - `cache-key-{{ getenv "BITRISEIO_PIPELINE_ID" }}`

  #### Key matching

  The most straightforward use case is when both the **Save cache** and **Restore cache** Steps use the same exact key to transfer cache between builds. Stored cache archives are scoped to the Bitrise project. Builds can restore caches saved by any previous Workflow run on any Bitrise Stack.

  Unlike this Step, the **Restore cache** Step can define multiple keys as fallbacks when there is no match for the first cache key. See the docs of the **Restore cache** Step for more details.

  #### Skip saving the cache

  The Step can decide to skip saving a new cache entry to avoid unnecessary work. This happens when there is a previously restored cache in the same workflow and the new cache would have the same contents as the one restored. Make sure to use unique cache keys with a checksum, and enable the **Unique cache key** input for the most optimal execution.

  #### Related steps

  [Restore cache](https://github.com/bitrise-steplib/bitrise-step-restore-cache/)

website: https://github.com/bitrise-steplib/bitrise-step-save-cache
source_code_url: https://github.com/bitrise-steplib/bitrise-step-save-cache
support_url: https://github.com/bitrise-steplib/bitrise-step-save-cache/issues

type_tags:
  - utility

run_if: .IsCI
is_skippable: true

toolkit:
  go:
    package_name: github.com/bitrise-steplib/bitrise-step-save-cache

deps:
  brew:
    - name: zstd
  apt_get:
    - name: zstd

inputs:
  - key:
    opts:
      title: Cache key
      summary: Key used for saving a cache archive. This can contain template elements.
      description: |-
        Key used for saving a cache archive.

        The key supports template elements for creating dynamic cache keys. These dynamic keys change the final key value based on the build environment or files in the repo in order to create new cache archives. See the Step description for more details and examples.

        The maximum length of a key is 512 characters (longer keys get truncated). Commas (`,`) are not allowed in keys.
      is_required: true

  - paths:
    opts:
      title: Paths to cache
      summary: List of files and folders to include in the cache.
      description: |-
        List of files and folders to include in the cache.

        Add one path per line. Each path can contain wildcards (`*` and `**`) that are evaluated at runtime.
      is_required: true

  - verbose: "false"
    opts:
      title: Verbose logging
      summary: Enable logging additional information for troubleshooting
      is_required: true
      value_options:
        - "true"
        - "false"

  - is_key_unique: "false"
    opts:
      title: Unique cache key
      summary: This allows the Step to skip creating a new cache in certain conditions. Only set to `true` if the key is unique to the cached content!
      description: |-
        Enabling this allows the Step to skip creating a new cache archive when the workflow previously restored the cache with the same key.

        This requires the cache key to be unique, so that the key changes whenever the files in the cache change. In practice, this means adding a `checksum` part to the key template with a file that describes the cache content (such as a lockfile).

        Example of a cache key where this can be safely turned on: `npm-cache-{{ checksum "package-lock.json" }}`. On the other hand, `my-cache-{{ .OS }}-{{ .Arch }}` is not unique (even though it uses templates).

        Note: the Step can still skip uploading a cache when this input is `false`, it just needs to create the archive first to compute its checksum (which takes time).
      value_options:
        - "true"
        - "false"

  - aws_bucket:
      opts:
        category: AWS
        title: "AWS Bucket name"
        summary: Provide an AWS bucket name to be used as cache backend.
        description: |-
          Bring your own bucket: exercise full control over the cache location.

          The provided AWS bucket acts as cache backend for the Restore Cache step.

          When the bucket name is provided, the step expects either:
          - CACHE_AWS_ACCESS_KEY_ID, CACHE_AWS_SECRET_ACCESS_KEY secrets to be setup for the workflow
          - The build is running on an EC2 instance. In this case, the steps expects the instance to have access to the bucket.

          When left empty, the step will use the default cache storage, provided by Bitrise.
        is_required: false
        is_expeand: true

  - aws_region:
      opts:
        category: AWS
        title: "AWS Region"
        summary: Region of the S3 bucket.
        description: |-
          AWS Region is only considered when a bucket name is defined.
        value_options:
          - us-east-1
          - us-east-2
          - us-west-1
          - us-west-2
          - ca-central-1
          - ca-west-1
          - eu-north-1
          - eu-west-3
          - eu-west-2
          - eu-west-1
          - eu-central-1
          - eu-central-2
          - eu-south-1
          - eu-south-2
          - ap-south-1
          - ap-south-2
          - ap-northeast-1
          - ap-northeast-2
          - ap-northeast-3
          - ap-southeast-1
          - ap-southeast-2
          - ap-southeast-3
          - ap-southeast-4
          - ap-east-1
          - sa-east-1
          - cn-north-1
          - cn-northwest-1
          - us-gov-east-1
          - us-gov-west-1
          - me-south-1
          - me-central-1
          - af-south-1
          - il-central-1
        is_required: false
        is_expeand: true

  - aws_access_key_id: $CACHE_AWS_ACCESS_KEY_ID
    opts:
      category: AWS
      description: |
        The access key id that matches the secret access key.

        The credentials need to be from a user that has at least the following permissions
        in the bucket specified bellow `s3:ListObjects`, `s3:PutObject`, `s3:GetObjectAttributes` and `s3:GetObject`.

        If the build instance has S3 access via IAM Instance role, this variable can be left empty.
      is_expand: true
      is_required: false
      is_sensitive: true
      summary: The AWS_ACCESS_KEY_ID with access to the bucket.
      title: AWS_ACCESS_KEY_ID

  - aws_secret_access_key: $CACHE_AWS_SECRET_ACCESS_KEY
    opts:
      category: AWS
      description: |
        The secret access key that matches the secret key ID.

        The credentials need to be from a user that has at least the following permissions
        in the bucket specified bellow `s3:ListObjects`, `s3:PutObject`, `s3:GetObjectAttributes` and `s3:GetObject`.

        If the build instance has S3 access via IAM Instance role, this variable can be left empty.
      is_expand: true
      is_required: false
      is_sensitive: true
      summary: The AWS_SECRET_ACCESS_KEY with access to the bucket.
      title: AWS_SECRET_ACCESS_KEY
